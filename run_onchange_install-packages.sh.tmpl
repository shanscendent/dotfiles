{{ if ne .chezmoi.os "windows" -}}
#!/bin/bash

# Define OS-specific packages as proper arrays
{{ if eq .chezmoi.os "linux" -}}
packages=("tmux" "jq" "fzf" "zoxide" "lazygit" "lazydocker" "autossh" "fpp" "fd" "eza"
  "ripgrep" "yazi" "glow" "ugrep" "bat" "tree" "rlwrap" "starship" "neovim" "npm" "go"
  "zsh-autosuggestions" "zsh-syntax-highlighting" "zsh-completions" "tlrc" "just"
  "git-delta" "duf" "dua-cli" "procs" "diskonaut" "antidote" "trash-cli"
)
{{ else if eq .chezmoi.os "darwin" -}}
packages=("tmux" "jq" "fzf" "zoxide" "lazygit" "lazydocker" "autossh" "fpp" "fd" "eza"
  "ripgrep" "yazi" "glow" "ugrep" "bat" "tree" "rlwrap" "starship" "neovim" "npm" "go"
  "zsh-autosuggestions" "zsh-syntax-highlighting" "zsh-completions" "tlrc" "just"
  "git-delta" "duf" "dua-cli" "procs" "diskonaut" "antidote"
)
{{ end -}}

# Only runs on Linux with a desktop environment (gnome for now)
{{ if eq .chezmoi.os "linux" -}}
{{ if lookPath "gnome-shell" }}
# Package installation
# ghostty
if ! snap list ghostty >/dev/null 2>&1; then
  echo "Installing ghostty."
  sudo snap install ghostty --classic
fi
# keyd
if ! dpkg -s keyd >/dev/null 2>&1; then
  echo "Installing keyd."
  sudo add-apt-repository ppa:keyd-team/ppa
  sudo apt update
  sudo apt install keyd -y
  sudo systemctl enable keyd && sudo systemctl start keyd
fi

# Gnome settings
# dconf dump /org/gnome/desktop/wm/ > "${HOME}/.config/dconffiles/gnome-wm.conf"
# dconf dump /org/gnome/desktop/interface/ > "${HOME}/.config/dconffiles/gnome-interface.conf"
# dconf dump /org/gnome/shell/extensions/paperwm/ > "${HOME}/.config/dconffiles/paperwm.conf"
dconf load /org/gnome/desktop/wm/ < "${HOME}/.config/dconffiles/gnome-wm.conf"
dconf load /org/gnome/desktop/interface/ < "${HOME}/.config/dconffiles/gnome-interface.conf"
# dconf load /org/gnome/shell/extensions/paperwm/ > "${HOME}/.config/dconffiles/paperwm.conf"
# ding messes up paperwm
# gnome-extensions disable ding@rastersoft.com

# Unused
# # sway
# if ! command -v sway >/dev/null 2>&1; then
#   echo "Installing sway."
#   sudo apt update
#   sudo apt install sway -y
# fi

# root owned files in etc (quick hack, should probably find a better way to do this)
# currently, we just overwrite on chezmoi apply
# keyd configuration
if [ ! -d /etc/keyd ]; then
  sudo mkdir -p /etc/keyd
fi
if ! cmp -s "${HOME}/.config/etcfiles/keyd/default.conf" /etc/keyd/default.conf; then
  echo "Overwriting keyd configuration and restarting it."
  sudo cp "${HOME}/.config/etcfiles/keyd/default.conf" /etc/keyd/default.conf
  sudo systemctl restart keyd
fi

# Use for testing
exit 0

{{ end -}}
{{ end -}}

# Function to check if a brew package is installed
is_installed() {
  brew list "$1" &>/dev/null
}

# Function to check if a package needs upgrade
needs_upgrade() {
  brew outdated | grep -q "^$1\$"
}

# Function to install packages only if they're not already installed
install_packages() {
  local missing_packages=()
  for pkg in "$@"; do
    if ! is_installed "$pkg"; then
      missing_packages+=("$pkg")
    fi
  done

  if [ ${#missing_packages[@]} -gt 0 ]; then
    echo "Installing missing packages: ${missing_packages[*]}"
    brew install "${missing_packages[@]}"
  else
    echo "All packages already installed."
  fi
}

# Function to upgrade only outdated packages from our list
upgrade_packages() {
  local outdated_packages=()
  for pkg in "$@"; do
    if is_installed "$pkg" && needs_upgrade "$pkg"; then
      outdated_packages+=("$pkg")
    fi
  done

  if [ ${#outdated_packages[@]} -gt 0 ]; then
    echo "Upgrading outdated packages: ${outdated_packages[@]}"
    brew upgrade "${outdated_packages[@]}"
  else
    echo "All packages are up to date."
  fi
}

# Update brew silently
# brew update &>/dev/null
brew update

# Install missing packages only
install_packages "${packages[@]}"

# Upgrade only outdated packages
upgrade_packages "${packages[@]}"

# Check if font is already installed
if ! brew list --cask font-jetbrains-mono-nerd-font &>/dev/null; then
  brew install --cask font-jetbrains-mono-nerd-font
fi

# Don't source rc files directly - print instruction instead
echo ""
echo "âœ… Package installation complete!"
echo "Please restart your terminal or run the appropriate command for your shell:"
echo "  - Bash: source ~/.bashrc"
echo "  - Zsh:  source ~/.zshrc"
{{ end -}}
